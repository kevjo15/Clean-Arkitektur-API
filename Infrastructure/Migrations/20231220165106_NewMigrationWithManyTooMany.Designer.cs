// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231220165106_NewMigrationWithManyTooMany")]
    partial class NewMigrationWithManyTooMany
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Models.Animal.AnimalModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AnimalModel");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AnimalModel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.UserAnimal", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AnimalModelId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "AnimalModelId");

                    b.HasIndex("AnimalModelId");

                    b.ToTable("UserAnimals");
                });

            modelBuilder.Entity("Domain.Models.Bird", b =>
                {
                    b.HasBaseType("Domain.Models.Animal.AnimalModel");

                    b.Property<bool>("CanFly")
                        .HasColumnType("tinyint(1)");

                    b.HasDiscriminator().HasValue("Bird");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8eb6be95-f91b-4ef0-8e3f-c46116a775f9"),
                            Name = "Drake",
                            CanFly = false
                        },
                        new
                        {
                            Id = new Guid("b256e0b0-1543-4609-9fb5-01008e7b52c3"),
                            Name = "Simon",
                            CanFly = false
                        },
                        new
                        {
                            Id = new Guid("df7fdee9-539f-4878-940b-c0d53cfdf60e"),
                            Name = "Gustav",
                            CanFly = false
                        });
                });

            modelBuilder.Entity("Domain.Models.Cat", b =>
                {
                    b.HasBaseType("Domain.Models.Animal.AnimalModel");

                    b.Property<bool>("LikesToPlay")
                        .HasColumnType("tinyint(1)");

                    b.HasDiscriminator().HasValue("Cat");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0336b8b4-ee19-4dc8-88bd-f608c44f4687"),
                            Name = "Nemo",
                            LikesToPlay = false
                        },
                        new
                        {
                            Id = new Guid("6b347677-450e-4b1c-8a09-1b99baddcc50"),
                            Name = "Doris",
                            LikesToPlay = false
                        },
                        new
                        {
                            Id = new Guid("53017fb1-1479-467f-8167-ee8d2d4bfd04"),
                            Name = "Simba",
                            LikesToPlay = false
                        });
                });

            modelBuilder.Entity("Domain.Models.Dog", b =>
                {
                    b.HasBaseType("Domain.Models.Animal.AnimalModel");

                    b.HasDiscriminator().HasValue("Dog");

                    b.HasData(
                        new
                        {
                            Id = new Guid("005080d8-52ef-4649-8b5c-c12d053c5293"),
                            Name = "Björn"
                        },
                        new
                        {
                            Id = new Guid("9522ef88-2b59-4d1a-b087-82e704b3e612"),
                            Name = "Patrik"
                        },
                        new
                        {
                            Id = new Guid("4fec0bb0-22e6-4e7f-b001-b046a92c8d36"),
                            Name = "Alfred"
                        });
                });

            modelBuilder.Entity("Domain.Models.UserAnimal", b =>
                {
                    b.HasOne("Domain.Models.Animal.AnimalModel", "AnimalModel")
                        .WithMany("UserAnimals")
                        .HasForeignKey("AnimalModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserAnimals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnimalModel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Animal.AnimalModel", b =>
                {
                    b.Navigation("UserAnimals");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("UserAnimals");
                });
#pragma warning restore 612, 618
        }
    }
}
